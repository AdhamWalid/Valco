<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Room</title>
    <link rel="stylesheet" href="/styles/chat.css"> <!-- Link to the external CSS file -->
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <!-- Navbar -->
    <header>
    <div class="container">
        <h1 class="logo">Valco</h1>
        <nav>
                    
                <a href="/profile">Profile</a> <!-- Show Profile link if logged in -->
                <a href="/chat">Chat Box</a>
                <a href="/logout">Logout</a>


            <button id="themeToggle" title="Toggle Dark Mode">ðŸŒ™</button>
        </nav>
    </div>
    </header>

    <!-- Chat container -->
    <div class="chat-container">
        <div class="chat-header">
            <h1>Chat Room</h1>
            <h2>Welcome, <%= username %>!</h2>
            <img src="<%= profilepic %>" alt="User Avatar" class="avatar">
        </div>
        
        <div id="messages" class="messages-container"></div>
        <form id="form" action="">
            <input id="input" autocomplete="off" placeholder="Type a message..." />
            <button type="submit">Send</button>
        </form>
    </div>

    <script>
        const socket = io(); // Initialize Socket.io

        const form = document.getElementById('form');
        const input = document.getElementById('input');
        const messagesDiv = document.getElementById('messages');
        const themeToggle = document.getElementById('theme-toggle');

        // Basic bot replies for predefined commands
        const botReplies = {
            '/help': 'Here are some commands you can try: /help, /tips',
            '/tips': 'Remember to be respectful and have fun!',
        };

        form.addEventListener('submit', (event) => {
            event.preventDefault();
            if (input.value) {
                // Check for bot command
                const userMessage = input.value.trim();
                if (botReplies[userMessage]) {
                    // Display bot reply immediately if it matches a command
                    displayMessage('Bot', botReplies[userMessage]);
                } else  if (userMessage.startsWith('/chat-gpt')) {
                    displayMessage('AI', "OK");
//671bdd3743cb0affe580f3c0
                    const msgData = {
                        senderId: '671bdd3743cb0affe580f3c0', // Replace with the actual sender ID if needed
                        message: userMessage,
                        room: 'default', // Default room; change if implementing multiple rooms
                        name: 'BOT'
                    };
                    console.log(msgData)
                    socket.emit('bot message', msgData); // Emit message to server

                } else {

                    // Emit user message to the server if it's not a command
                    const msgData = {
                        senderId: '<%= senderId %>', // Replace with the actual sender ID if needed
                        message: userMessage,
                        room: 'default', // Default room; change if implementing multiple rooms
                        name: '<%= username %>'
                    };
                    socket.emit('chat message', msgData); // Emit message to server
                }
                input.value = ''; // Clear the input field
            }
        });

        // Listen for incoming messages
        socket.on('chat message', (msg) => {
            console.log(msg)
            displayMessage(msg.senderId, msg.message , msg.name);
        });

        socket.on('bot message', (msg) => {
            displayMessage(msg.senderId, msg.message , msg.name);
        });

        // Function to display a message
        function displayMessage(sender, message , name) {
            const item = document.createElement('div');
            item.classList.add('message-item');
            item.innerHTML = `<span class="sender-name">${name}:</span> ${message}`;
            messagesDiv.appendChild(item);
            messagesDiv.scrollTop = messagesDiv.scrollHeight; // Scroll to the bottom
        }

        // Theme Toggle
        document.body.className = localStorage.getItem('theme') || 'light-theme';
        themeToggle.addEventListener('click', () => {
            const currentTheme = document.body.className;
            const newTheme = currentTheme === 'light-theme' ? 'dark-theme' : 'light-theme';
            document.body.className = newTheme;
            localStorage.setItem('theme', newTheme);
        });
    </script>
</body>
</html>
