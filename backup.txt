const express = require('express');
const app = express();
const path = require('path');
const chalk = require('chalk');
const port = process.env.PORT || 3030;
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const multer = require('multer');
const http = require('http')
const socket = require('socket.io')
// Chalk declaration
const log = console.log;

// Configure multer for file storage
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/'); // Directory to save uploaded files
    },
    filename: (req, file, cb) => {
        cb(null, `${Date.now()}-${file.originalname}`); // Unique filename
    }
});

const upload = multer({ storage: storage });

// Connect to MongoDB
mongoose.connect('mongodb+srv://Adham:dZ3QrKcfuMVd7nAB@cluster0.94gew.mongodb.net/velco_auth?tls=true')
    .then(() => log(chalk`{green [Success]} Connected to MongoDB`))
    .catch(err => {
        log(chalk`{red [Error]} Could not connect to MongoDB: ${err.message}`);
    });

// MongoDB User schema and model
const userSchema = new mongoose.Schema({
    full_name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    profileurl: { type: String, required: false, default: "" },
    admin: {type : Boolean , required: false , default : false} 
});

const User = mongoose.model('Users', userSchema);

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'views')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads'))); // Serve uploads directory
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

app.use(session({
    secret: 'VERYSECRETKEY',
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false } // Set to true if using HTTPS
}));

// Serve the homepage
app.get('/home', (req, res) => {
    res.render('index');
});

// Sign-Up API
app.post('/signup', async (req, res) => {
    const { full_name, email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ error: 'Email already exists' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({
            full_name,
            email,
            password: hashedPassword,
        });
        await newUser.save();
        res.status(201).json({ message: 'Welcome, registered successfully' });
    } catch (error) {
        res.status(500).json({ error: 'Server error' });
        log(chalk`{red [Error]} ${error.message}`);
    }
});

// Login API
app.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ error: 'User not found' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ error: 'Invalid password' });
        }

        req.session.userId = user._id;
        req.session.fullName = user.full_name;
        req.session.profilePicture = user.profileurl;

        res.status(200).json({ message: 'Welcome, Login successful' });
    } catch (error) {
        res.status(500).json({ error: 'Server error' });
        log(chalk`{red [Error]} ${error.message}`);
    }
});

// Profile API
app.get('/', (req, res) => {
    res.redirect('/home');
});

app.get('/profile', async (req, res) => {
    if (!req.session.userId) {
        return res.redirect('/404');
    }

    try {
        const user = await User.findById(req.session.userId);
        if (!user) {
            return res.status(404).json({ error: 'User not found' }).then(() => {
                res.redirect('/home');
            });
        }

        res.render('profile', {
            fullName: user.full_name,
            email: user.email,
            profilePicture: user.profileurl,
        });
    } catch (error) {
        res.status(500).json({ error: 'Server error' });
        console.error(error);
    }
});

// Edit Profile API
app.get('/edit-profile', async (req, res) => {
    if (!req.session.userId) {
        return res.redirect('/home');
    }

    try {
        const user = await User.findById(req.session.userId);
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        res.render('edit-profile', {
            fullName: user.full_name,
            email: user.email,
            profilePicture: user.profileurl,
        });
    } catch (error) {
        res.status(500).json({ error: 'Server error' });
        console.error(error);
    }
});

// Route to handle profile update
app.post('/update-profile', upload.single('profilePicture'), async (req, res) => {
    if (!req.session.userId) {
        return res.redirect('/home');
    }

    const { fullName, email, password } = req.body;
    let updateData = { full_name: fullName, email: email };

    if (req.file) {
        updateData.profileurl = `/uploads/${req.file.filename}`; // Save the file path in the database
        console.log('File uploaded:', req.file.path);
    }

    try {
        if (password) {
            const hashedPassword = await bcrypt.hash(password, 10);
            updateData.password = hashedPassword; // Include password only if provided
        }

        const updatedUser = await User.findByIdAndUpdate(
            req.session.userId,
            updateData,
            { new: true } // Return the updated document
        );

        if (!updatedUser) {
            return res.status(404).json({ error: 'User not found' });
        }

        req.session.fullName = updatedUser.full_name;
        res.redirect('/profile'); // Redirect to profile page
    } catch (error) {
        res.status(500).json({ error: 'Server error' });
        console.error(error);
    }
});

app.get('/logout', (req, res) => {
    req.session.destroy(err => {
        if (err) {
            console.error('Error during logout:', err);
            return res.status(500).json({ error: 'Could not log out' });
        }
        res.redirect('/home');
    });
});

// 404 Error Page
app.use((req, res, next) => {
    res.status(404).render('404'); // Render the 404.ejs page
});

// Start the server
app.listen(port, () => {
    log(chalk`{green [Success]} Listening on port {green ${port}}`);
});
